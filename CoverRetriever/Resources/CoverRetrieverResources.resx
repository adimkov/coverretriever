<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonClose" xml:space="preserve">
    <value>Close</value>
    <comment>About</comment>
  </data>
  <data name="CoverPreviewTitle" xml:space="preserve">
    <value>Cover of album {0} - {1}</value>
    <comment>Shell</comment>
  </data>
  <data name="FlagApplyToAll" xml:space="preserve">
    <value>Apply to all in the directory</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="FlagEmbedCover" xml:space="preserve">
    <value>Embed in the file</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="GrabTagMessage" xml:space="preserve">
    <value>Retrieving tags for '{0}'...</value>
    <comment>Shell</comment>
  </data>
  <data name="MessageCoverPreview" xml:space="preserve">
    <value>Loading the cover...</value>
    <comment>Preview operation</comment>
  </data>
  <data name="MessageDownloadCover" xml:space="preserve">
    <value>Downloading covers...</value>
    <comment>Shell operation message</comment>
  </data>
  <data name="MessageLibraryLoad" xml:space="preserve">
    <value>Loading the library...</value>
    <comment>Shell</comment>
  </data>
  <data name="MessageSaveCover" xml:space="preserve">
    <value>Saving the cover...</value>
    <comment>Operation message</comment>
  </data>
  <data name="MessageSaveTagsInContext" xml:space="preserve">
    <value>Save tags in '{0}'</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="TextAbout" xml:space="preserve">
    <value>About</value>
    <comment>Shell</comment>
  </data>
  <data name="TextAlbum" xml:space="preserve">
    <value>Album:</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="TextAppicationDescription" xml:space="preserve">
    <value>Cover Retriever is a small, simple, easy to use application specially designed to help you find covers for compositions in "MP3/FLAC" formats and saving them onto disk or in audio file.</value>
    <comment>About</comment>
  </data>
  <data name="TextArtist" xml:space="preserve">
    <value>Artist:</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="TextAuthor" xml:space="preserve">
    <value>by Anton Dimkov</value>
    <comment>About</comment>
  </data>
  <data name="TextBrowse" xml:space="preserve">
    <value>Browse</value>
    <comment>Button</comment>
  </data>
  <data name="TextCancel" xml:space="preserve">
    <value>Cancel</value>
    <comment>Button</comment>
  </data>
  <data name="TextCover" xml:space="preserve">
    <value>Current cover:</value>
    <comment>Shell</comment>
  </data>
  <data name="TextCoverSixeHeight" xml:space="preserve">
    <value>Height:</value>
    <comment>CoverPreview</comment>
  </data>
  <data name="TextCoverSixeWidth" xml:space="preserve">
    <value>Width:</value>
    <comment>CoverPreview</comment>
  </data>
  <data name="TextFile" xml:space="preserve">
    <value>File</value>
    <comment>Shell</comment>
  </data>
  <data name="TextFileDetails" xml:space="preserve">
    <value>Audio Info</value>
    <comment>Shell</comment>
  </data>
  <data name="TextGetTagsFromLasrFm" xml:space="preserve">
    <value>Get tag from Last.fm</value>
    <comment>Shell</comment>
  </data>
  <data name="TextNewVersion" xml:space="preserve">
    <value>New Version Available: {0}</value>
    <comment>About</comment>
  </data>
  <data name="TextOk" xml:space="preserve">
    <value>Ok</value>
    <comment>Button</comment>
  </data>
  <data name="TextOpenFolder" xml:space="preserve">
    <value>Open Folder</value>
    <comment>Shell</comment>
  </data>
  <data name="TextProduct" xml:space="preserve">
    <value>Cover Retriever</value>
    <comment>About</comment>
  </data>
  <data name="TextProjectHome" xml:space="preserve">
    <value>Project home</value>
    <comment>About</comment>
  </data>
  <data name="TextSave" xml:space="preserve">
    <value>Save</value>
    <comment>Button</comment>
  </data>
  <data name="TextStepOne" xml:space="preserve">
    <value>System will load audio files to search for a cover from selected folder (including subfolders)</value>
    <comment>Open folder dialog</comment>
  </data>
  <data name="TextStepOneHeader" xml:space="preserve">
    <value>Step 1. Choose a folder with audio files</value>
    <comment>Open folder dialog</comment>
  </data>
  <data name="TextTaggerPoweredBy" xml:space="preserve">
    <value>Tag finder powered by:</value>
    <comment>About</comment>
  </data>
  <data name="TextTrackName" xml:space="preserve">
    <value>Title:</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="TextYear" xml:space="preserve">
    <value>Year:</value>
    <comment>File сonductor view</comment>
  </data>
  <data name="TitleStepOne" xml:space="preserve">
    <value>Choose a folder</value>
    <comment>Open folder dialog</comment>
  </data>
  <data name="TooltipPreviewAction" xml:space="preserve">
    <value>Double click to preview</value>
    <comment>Shell</comment>
  </data>
</root>