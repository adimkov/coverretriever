<#@ template hostspecific="True" debug="True" #>
<#@ output extension="cs" #>

<#+ 
//Generate command
void GenerateCommand(string eventName, string targetType)
{			
#>
	/// <summary>
	/// Static Class that holds all Dependency Properties and Static methods to allow 
	/// the <#= eventName#> event of the  <#= targetType#> class to be attached to a Command. 
	/// </summary>
	public static class <#= eventName#>
	{
		private static readonly DependencyProperty <#= eventName#>CommandBehaviorProperty = DependencyProperty.RegisterAttached(
			"<#= eventName#>CommandBehavior",
			typeof(<#= eventName#>CommandBehavior),
			typeof(<#= eventName#>),
			null);


		/// <summary>
		/// Command to execute on click event.
		/// </summary>
		public static readonly DependencyProperty CommandProperty = DependencyProperty.RegisterAttached(
			"Command",
			typeof(ICommand),
			typeof(<#= eventName#>),
			new PropertyMetadata(OnSetCommandCallback));

		/// <summary>
		/// Command parameter to supply on command execution.
		/// </summary>
		public static readonly DependencyProperty CommandParameterProperty = DependencyProperty.RegisterAttached(
			"CommandParameter",
			typeof(object),
			typeof(<#= eventName#>),
			new PropertyMetadata(OnSetCommandParameterCallback));


		/// <summary>
		/// Sets the <see cref="ICommand"/> to execute on the click event.
		/// </summary>
		/// <param name="control"> <#= targetType#> dependency object to attach command</param>
		/// <param name="command">Command to attach</param>
		public static void SetCommand(<#= targetType#> control, ICommand command)
		{
			control.SetValue(CommandProperty, command);
		}

		/// <summary>
		/// Retrieves the <see cref="ICommand"/> attached to the <see cref="ButtonBase"/>.
		/// </summary>
		/// <param name="control"><#= targetType#> containing the Command dependency property</param>
		/// <returns>The value of the command attached</returns>
		public static ICommand GetCommand(<#= targetType#> control)
		{
			return control.GetValue(CommandProperty) as ICommand;
		}

		/// <summary>
		/// Sets the value for the CommandParameter attached property on the provided <see cref="<#= targetType#>"/>.
		/// </summary>
		/// <param name="control">ButtonBase to attach CommandParameter</param>
		/// <param name="parameter">Parameter value to attach</param>
		public static void SetCommandParameter(<#= targetType#> control, object parameter)
		{
			control.SetValue(CommandParameterProperty, parameter);
		}

		/// <summary>
		/// Gets the value in CommandParameter attached property on the provided <see cref="ButtonBase"/>
		/// </summary>
		/// <param name="control"><#= targetType#> that has the CommandParameter</param>
		/// <returns>The value of the property</returns>
		public static object GetCommandParameter(<#= targetType#> control)
		{
			return control.GetValue(CommandParameterProperty);
		}

		private static void OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)
		{
			<#= targetType#> control = dependencyObject as <#= targetType#>;
			if (control != null)
			{
				var behavior = GetOrCreateBehavior(control);
				behavior.Command = e.NewValue as ICommand;
			}
		}

		private static void OnSetCommandParameterCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)
		{
			<#= targetType#> control = dependencyObject as <#= targetType#>;
			if (control != null)
			{
				var behavior = GetOrCreateBehavior(control);
				behavior.CommandParameter = e.NewValue;
			}
		}

		private static <#= eventName#>CommandBehavior GetOrCreateBehavior(<#= targetType#> control)
		{
			var behavior = control.GetValue(<#= eventName#>CommandBehaviorProperty) as <#= eventName#>CommandBehavior;
			if (behavior == null)
			{
				behavior = new <#= eventName#>CommandBehavior(control);
				control.SetValue(<#= eventName#>CommandBehaviorProperty, behavior);
			}

			return behavior;
		}
	}
	
	public class <#= eventName#>CommandBehavior : CommandBehaviorBase<<#= targetType#>>
	{
		public <#= eventName#>CommandBehavior(<#= targetType#> targetObject)
			: base(targetObject)
		{
			targetObject.<#= eventName#> += On<#= eventName#>;
		}

		private void On<#= eventName#>(object sender, EventArgs routedEventArgs)
		{
			ExecuteCommand();
		}
	}
<#+
}
#>